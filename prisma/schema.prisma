generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model accounts {
  id                  Int       @id @default(autoincrement())
  user_id             Int
  type                String    @db.VarChar
  provider            String    @db.VarChar
  provider_account_id String    @db.VarChar
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?   @db.VarChar
  scope               String?   @db.VarChar
  id_token            String?
  session_state       String?   @db.VarChar
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  users               users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_accounts_user_id")

  @@unique([provider, provider_account_id], map: "uk_accounts_provider")
  @@index([user_id], map: "idx_accounts_user_id")
}

model amenities {
  id                 Int                  @id
  name               String               @unique @db.VarChar(100)
  icon               String?              @db.VarChar(100)
  category           String?              @db.VarChar(50)
  created_at         DateTime?            @default(now()) @db.Timestamp(6)
  property_amenities property_amenities[]
}

model booking_guests {
  id         Int       @id
  booking_id Int
  first_name String    @db.VarChar(100)
  last_name  String    @db.VarChar(100)
  age        Int?
  created_at DateTime? @default(now()) @db.Timestamp(6)
  bookings   bookings  @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bookings {
  id                                 Int              @id
  property_id                        Int
  guest_id                           Int
  check_in_date                      DateTime         @db.Date
  check_out_date                     DateTime         @db.Date
  num_guests                         Int
  total_price                        Decimal          @db.Decimal(10, 2)
  cleaning_fee                       Decimal?         @default(0) @db.Decimal(10, 2)
  security_deposit                   Decimal?         @default(0) @db.Decimal(10, 2)
  status                             String?          @default("pending") @db.VarChar(20)
  special_requests                   String?
  created_at                         DateTime?        @default(now()) @db.Timestamp(6)
  updated_at                         DateTime?        @default(now()) @db.Timestamp(6)
  payment_status                     String?          @default("pending") @db.VarChar
  payment_intent_id                  String?          @db.VarChar
  booking_fee                        Decimal?         @db.Decimal
  tax_amount                         Decimal?         @db.Decimal
  host_payout_amount                 Decimal?         @db.Decimal
  host_payout_status                 String?          @default("pending") @db.VarChar
  cancellation_policy                String?          @default("moderate") @db.VarChar
  cancelled_at                       DateTime?        @db.Timestamp(6)
  cancelled_by                       Int?
  cancellation_reason                String?
  booking_guests                     booking_guests[]
  users_bookings_guest_idTousers     users            @relation("bookings_guest_idTousers", fields: [guest_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  properties                         properties       @relation(fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_bookings_cancelled_byTousers users?           @relation("bookings_cancelled_byTousers", fields: [cancelled_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_bookings_cancelled_by")
  payments                           payments[]
  reviews                            reviews[]

  @@index([check_in_date, check_out_date], map: "idx_bookings_dates")
  @@index([guest_id], map: "idx_bookings_guest_id")
  @@index([property_id], map: "idx_bookings_property_id")
}

model cities {
  id          Int           @id
  name        String        @db.VarChar(100)
  country_id  Int
  latitude    Decimal?      @db.Decimal(10, 8)
  longitude   Decimal?      @db.Decimal(11, 8)
  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  description String?       @db.VarChar(255)
  countries   countries     @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  city_images city_images[]
  towns       towns[]

  @@unique([name, country_id])
}

model city_images {
  id            Int       @id
  city_id       Int
  image_url     String    @db.VarChar(500)
  is_primary    Boolean?  @default(false)
  display_order Int?      @default(0)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  cities        cities    @relation(fields: [city_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([city_id], map: "idx_city_images_city_id")
}

model countries {
  id           Int       @id
  name         String    @unique @db.VarChar(100)
  country_code String    @unique @db.Char(2)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  cities       cities[]
}

model payments {
  id                  Int       @id @default(autoincrement())
  booking_id          Int
  payment_intent_id   Int?
  stripe_charge_id    String?   @db.VarChar
  amount              Int
  currency            String?   @default("usd") @db.VarChar(3)
  status              String    @db.VarChar
  payment_method_type String?   @db.VarChar
  failure_reason      String?   @db.VarChar
  refund_amount       Int?      @default(0)
  processing_fee      Int?
  net_amount          Int?
  created_at          DateTime? @default(now()) @db.Timestamp(6)
  updated_at          DateTime? @default(now()) @db.Timestamp(6)
  bookings            bookings  @relation(fields: [booking_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_payments_booking_id")

  @@index([booking_id], map: "idx_payments_booking_id")
}

model properties {
  id                     Int                      @id
  host_id                Int
  property_type_id       Int
  town_id                Int
  title                  String                   @db.VarChar(255)
  description            String?
  address                String                   @db.VarChar(500)
  latitude               Decimal?                 @db.Decimal(10, 8)
  longitude              Decimal?                 @db.Decimal(11, 8)
  bedrooms               Int                      @default(1)
  bathrooms              Decimal                  @default(1) @db.Decimal(3, 1)
  max_guests             Int                      @default(1)
  base_price             Decimal                  @db.Decimal(10, 2)
  cleaning_fee           Decimal?                 @default(0) @db.Decimal(10, 2)
  security_deposit       Decimal?                 @default(0) @db.Decimal(10, 2)
  is_active              Boolean?                 @default(true)
  min_stay_nights        Int?                     @default(1)
  max_stay_nights        Int?                     @default(365)
  created_at             DateTime?                @default(now()) @db.Timestamp(6)
  updated_at             DateTime?                @default(now()) @db.Timestamp(6)
  bookings               bookings[]
  users                  users                    @relation(fields: [host_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  property_types         property_types           @relation(fields: [property_type_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  towns                  towns                    @relation(fields: [town_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  property_amenities     property_amenities[]
  property_blocked_dates property_blocked_dates[]
  property_images        property_images[]

  @@index([host_id], map: "idx_properties_host_id")
  @@index([is_active], map: "idx_properties_is_active")
  @@index([town_id], map: "idx_properties_town_id")
}

model property_amenities {
  id          Int        @id
  property_id Int
  amenity_id  Int
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  amenities   amenities  @relation(fields: [amenity_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  properties  properties @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([property_id, amenity_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model property_blocked_dates {
  id          Int        @id
  property_id Int
  start_date  DateTime   @db.Date
  end_date    DateTime   @db.Date
  properties  properties @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([start_date, end_date], map: "idx_property_blocked_dates_dates")
  @@index([property_id], map: "idx_property_blocked_dates_property_id")
}

model property_images {
  id          Int        @id
  property_id Int
  image_url   String     @db.VarChar(500)
  created_at  DateTime?  @default(now()) @db.Timestamp(6)
  properties  properties @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model property_types {
  id          Int          @id
  name        String       @unique @db.VarChar(100)
  description String?
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  properties  properties[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  id                               Int       @id
  booking_id                       Int
  reviewer_id                      Int
  reviewed_id                      Int
  rating                           Int
  title                            String?   @db.VarChar(255)
  comment                          String?
  cleanliness_rating               Int?
  communication_rating             Int?
  location_rating                  Int?
  value_rating                     Int?
  created_at                       DateTime? @default(now()) @db.Timestamp(6)
  bookings                         bookings  @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_reviews_reviewed_idTousers users     @relation("reviews_reviewed_idTousers", fields: [reviewed_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_reviews_reviewer_idTousers users     @relation("reviews_reviewer_idTousers", fields: [reviewer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([booking_id], map: "idx_reviews_booking_id")
}

model towns {
  id          Int          @id
  name        String       @db.VarChar(100)
  city_id     Int
  postal_code String?      @db.VarChar(20)
  created_at  DateTime?    @default(now()) @db.Timestamp(6)
  properties  properties[]
  cities      cities       @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([name, city_id])
}

model users {
  id                                    Int          @id
  email                                 String       @unique @db.VarChar(255)
  password_hash                         String       @db.VarChar(255)
  first_name                            String       @db.VarChar(100)
  last_name                             String       @db.VarChar(100)
  phone                                 String?      @db.VarChar(20)
  date_of_birth                         DateTime?    @db.Date
  profile_picture                       String?      @db.VarChar(500)
  bio                                   String?
  is_host                               Boolean?     @default(false)
  is_verified                           Boolean?     @default(false)
  created_at                            DateTime?    @default(now()) @db.Timestamp(6)
  updated_at                            DateTime?    @default(now()) @db.Timestamp(6)
  email_verified                        DateTime?    @db.Timestamp(6)
  image                                 String?      @db.VarChar
  stripe_customer_id                    String?      @unique(map: "users_stripe_customer_id_unique") @db.VarChar
  stripe_account_id                     String?      @unique(map: "users_stripe_account_id_unique") @db.VarChar
  accounts                              accounts[]
  bookings_bookings_guest_idTousers     bookings[]   @relation("bookings_guest_idTousers")
  bookings_bookings_cancelled_byTousers bookings[]   @relation("bookings_cancelled_byTousers")
  properties                            properties[]
  reviews_reviews_reviewed_idTousers    reviews[]    @relation("reviews_reviewed_idTousers")
  reviews_reviews_reviewer_idTousers    reviews[]    @relation("reviews_reviewer_idTousers")

  @@index([email], map: "idx_users_email")
}
